import dash
import dash_html_components as html
import dash_core_components as dcc
import pandas as pd
import numpy as np
from datetime import datetime
import base64
import io
import dash_table
import plotly.graph_objs as go
import uuid
from flask_caching import Cache
import plotly.express as px

from dash.dependencies import Input, Output, State

#Create the app
app = dash.Dash(__name__, external_stylesheets=['/assets/toolbox.css'])
'''
Turn callback exceptions off as we are generating callbacks that 
refer to things generated by other callbacks.
WARNING: THIS DOES DISABLE OTHER WARNINGS OR EXCEPTIONS FOR CALLBACKS
NOT BEING FOUND INSIDE THE PYTHON FILE
'''
app.config['suppress_callback_exceptions']=True
#Create the cache needed to store the dataframe
cache = Cache(app.server, config={
    'CACHE_TYPE' : 'filesystem',
    'CACHE_DIR' : 'cache',
})

#--------CONSTANT VARIABLES------------
COLORSCALES_DICT = [
    {'value': 'Blackbody', 'label': 'Blackbody'},
    {'value': 'Bluered', 'label': 'Bluered'},
    {'value': 'Blues', 'label': 'Blues'},
    {'value': 'Earth', 'label': 'Earth'},
    {'value': 'Electric', 'label': 'Electric'},
    {'value': 'Greens', 'label': 'Greens'},
    {'value': 'Greys', 'label': 'Greys'},
    {'value': 'Hot', 'label': 'Hot'},
    {'value': 'Jet', 'label': 'Jet'},
    {'value': 'Picnic', 'label': 'Picnic'},
    {'value': 'Portland', 'label': 'Portland'},
    {'value': 'Rainbow', 'label': 'Rainbow'},
    {'value': 'RdBu', 'label': 'RdBu'},
    {'value': 'Reds', 'label': 'Reds'},
    {'value': 'Viridis', 'label': 'Viridis'},
    {'value': 'YlGnBu', 'label': 'YlGnBu'},
    {'value': 'YlOrRd', 'label': 'YlOrRd'},
]

#Begin the layout of the app layout
app.layout = html.Div(children = [
    html.Div(str(uuid.uuid4()), id='session_id', style={'display': 'none'}),
    #Create the header
    html.Div(
        className = "header",
        children = [
            html.Img(
                src="https://skyraidnextcloud.duckdns.org/index.php/s/Axc37NW9wjaKMyr/preview",
                className="header-logo"
            ),
            html.H1("Earth Science Toolbox", className="header-title"),
        ]),
    #Add tabs to the page
    dcc.Tabs(
        id="tabs-styled-with-inline", 
        #Sets the default tab to open first
        value='upload',
        parent_className='custom-tabs', 
        className ='custom-tabs-container',
        children=[
            #Each tab has a label and different value, the value will determine what the output is
            dcc.Tab(label='Data Upload', value='upload', className='custom-tab', selected_className='custom-tab--selected'),
            dcc.Tab(label='Scatter Plot', value='scatter', className='custom-tab', selected_className='custom-tab--selected'),
            dcc.Tab(label='Line Plot', value='line', className='custom-tab', selected_className='custom-tab--selected'),
            dcc.Tab(label='Box and Whisker Plot', value='box', className='custom-tab', selected_className='custom-tab--selected'),
            dcc.Tab(label='Bar Plot', value='bar', className='custom-tab', selected_className='custom-tab--selected'),
        ]),
    #The HTML Division to show the content
    html.Div(
        id='tabs-content-inline',
        className="custom-tabs-inline",
    )
])
#Callbacks for the tabs
@app.callback(Output('tabs-content-inline', 'children'),
              [Input('tabs-styled-with-inline', 'value'),])
def render_content(tab):
    #Based on the value of the tabs....
    if tab == 'upload':
        #If Upload is selected then show the content for uploading and data cleaning recommendation
        return html.Div([
            dcc.Tabs(
                id='tabs-styled-in-upload',
                value='upload-data',
                className="custom-tabs-container-upload",
                #Tabs are vertical
                vertical=True,
                #Tabs for inside the Data Cleaning Recommendation Page
                children=[
                    dcc.Tab(label='Upload Your Data', value='upload-data', className='custom-tab-upload', selected_className='custom-tab--selected-upload'),
                    dcc.Tab(label='Your Uploaded Data', value='uploaded', className='custom-tab-upload', selected_className='custom-tab--selected-upload'),
                    dcc.Tab(label='Basic Description of Data', value='description', className='custom-tab-upload', selected_className='custom-tab--selected-upload'),
                    dcc.Tab(label='Scatter Plot Matrix', value='scatterplot-matrix', className='custom-tab-upload', selected_className='custom-tab--selected-upload'),
                ],
            ),
             #The HTML Division to show the content
            html.Div(
                id='tabs-content-upload',
                className="custom-tabs-upload",
            ),
        ])
    elif tab == 'scatter':
        return html.Div([
            html.H3('Tab content 2')
        ])
    elif tab == 'line':
        return html.Div([
            html.H3('Tab content 3')
        ])
    elif tab == 'box':
        return html.Div([
            html.H3('Tab content 4')
        ])
    elif tab == 'bar':
        return html.Div([
            html.H3('Tab content 4')
        ])


'''
------------------ DATA CLEANING RECOMMENDATION PAGE AND DATA UPLOAD --------------------------------
Content for the Data Upload Page is below
Please look into the comments for what each one is for
Some of it is derived by https://dash.plot.ly/dash-core-components/upload
As it provides a good base to start from in order to upload files.
'''
def parse_contents(contents, session_id, filename, date):
    content_type, content_string = contents.split(',')

    decoded = base64.b64decode(content_string)
    try:
        if 'csv' in filename:
            # Assume that the user uploaded a CSV file
            df = pd.read_csv(io.StringIO(decoded.decode('utf-8')))
        elif 'xls' in filename:
            # Assume that the user uploaded an excel file
            df = pd.read_excel(io.BytesIO(decoded))
        elif 'xlsx' in filename:
            # Assume that the user uploaded an excel file
            df = pd.read_excel(io.BytesIO(decoded))

        #Add Filename to cache
        cache.set(session_id + '-name', filename)
        #Add File Last Modified Datetime to cache
        cache.set(session_id + '-date', str(datetime.fromtimestamp(date)))
        #Add Dataframe to Cache
        cache.set(session_id + '-df', df)

        return html.Div([
                #Show the uploaded file name and last modified timestamp
                html.H3("Uploaded File: {}".format(filename)),
                html.H3("Last Modified: {}".format(str(datetime.fromtimestamp(date)))),
            ]
        )
        
    #If an exception occured when uploading the file
    except Exception as e:
        #Print the exception in the terminal
        print(e)
        #Let User know there was a problem
        return html.Div([
            'There was an error processing this file.'
        ])

@app.callback(Output('tabs-content-upload', 'children'),
              [Input('tabs-styled-in-upload', 'value'),
              Input('session_id', 'children')])
def render_upload_content(tab, session_id):
    #Retrieve the Dataframe from Cache
    df = cache.get(session_id + '-df')
    if tab == "upload-data":
        #If no data has been uploaded then show the content below
        if df is None:
            return html.Div([
                    #The upload area!
                    html.H1('Upload Your Dataset'),
                    #Click on it or drag and drop into it
                    dcc.Upload(
                        id = 'data',
                        children=html.Div(['Drag and Drop or ', html.A('Select Files')]),
                        className='data-upload',
                    ),
                    #Here is our no file uploaded message
                    html.Div(id='markdown-message', children=[
                        dcc.Markdown("""
                            If you are seeing this message, then you haven't uploaded any data.

                            Please use the box above to drag a file into the box, or

                            Click on the box to select a file from your device.

                            Files should be **Excel** (.xls or .xlsx) or **CSV** (.csv).
                            """)
                    ]),
                    #The output to show filename and data last modified date
                    html.Div(id='upload-data-output'),
                ]
            )
        else:
            #I dislike repeating code, but it works as it should, its not worth the extra effort to condense it right now
            return html.Div([
                #The upload area!
                    html.H1('Upload Your Dataset'),
                    dcc.Upload(
                        id = 'data',
                        children=html.Div(['Drag and Drop or ', html.A('Select Files')]),
                        className='data-upload',
                    ),
                    #Our message shows the cached content, will be hidden when things change
                    html.Div(id='markdown-message', children=[
                        html.H3("Uploaded File: {}".format(cache.get(session_id + '-name'))),
                        html.H3("Last Modified: {}".format(cache.get(session_id + '-date'))),
                    ]),
                    #Show the uploaded file name and last modified timestamp 
                    html.Div(id='upload-data-output'),
                ], style={'width' : '100%'}
            )
    elif tab == 'uploaded':
        if df is None:
            #Take a look at the uploaded data in a table
            return html.Div([
                #However if we have no data, we leave a message.
                dcc.Markdown('''
                ## No Data Uploaded
                Please go to **Upload Your Data** and select an Excel or CSV file to upload
                Once you have done this, your data will appear here.
                '''),
            ])
        else:
            #Create the conditionals list of dictionaries, starting by highlighting each odd row
            conditionals = [
                {
                    'if': {'row_index': 'odd'},
                    'backgroundColor': 'rgb(248, 248, 248)'
                },
            ]
            #Create the conditionals to highlight the cells which are empty
            for col in df.columns:
                conditionals.append(
                    {
                        #If the data in the cell is None, NaN, NA, null then highlight in orange red
                        'if': {
                            'column_id': col,
                            'filter_query': '{{{}}} is nil'.format(col)
                        },
                    'backgroundColor': 'orangered'
                    }
                )
            #Get the size of the dataframe in number of cells
            size = df.shape[0] * df.shape[1]
            #Get the number of missing cells (its a sum of the missing cells in each column)
            missing_cells = df.isna().sum().sum()
            #Put it in terms of percentage to 3 decimal places.
            missing_stat = round((missing_cells / size)*100,3)

            return html.Div([
                #Give some headers and show filename and date last modified
                html.H1("Your Uploaded Data"),
                html.P("It contains {} cells, of which {} are missing values.".format(size, missing_cells)),
                html.P("The missing data accounts for {}% of the data set.".format(missing_stat)),
                #Show the data
                dash_table.DataTable(
                    data=df.to_dict('records'),
                    columns=[{'name': i, 'id': i} for i in df.columns],
                    #Fix the headers on the table
                    fixed_rows={ 'headers': True, 'data': 0 },
                    #Ensure scrolling for smaller screens, but also ensure it fills the container
                    style_table={
                        'overflowX' : 'scroll', 
                        'overflowY' : 'scroll',
                        'mid-width' : '90%',
                    },
                    #Each cell should be a minimum of 100 pixels in width
                    style_cell={
                        'minWidth' : '100px',
                    },
                    #Apply the conditionals to the cells to highlight missing values
                    style_data_conditional=conditionals,
                    #Chnage the style of the header
                    style_header={
                        'backgroundColor': 'rgb(230, 230, 230)',
                        'fontWeight': 'bold'
                    }
                ),
            ])
    elif tab == 'description':
        if df is None:
            return html.Div([
                #There is no data so leave a message
                dcc.Markdown('''
                ## No Data Uploaded
                Please go to **Upload Your Data** and select an Excel or CSV file to upload
                Once you have done this, your data description will appear here.
                '''),
            ])
        else:
            #Use describe to get basic stats from numerical columns including percentiles
            num_describe = df.describe(percentiles=[0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95])
            #Reset the index to have the Features column appear in describe result
            num_describe = num_describe.reset_index()
            #Rename the index column to Features
            num_describe = num_describe.rename(columns={'index' : 'Features'})
            #Check if all the columns are numerical, if they're not then generate information about the rest
            if len(df.select_dtypes(include='number').columns.values) != len(df.columns):
                #Now apply the same steps but for categorical columns too
                cat_describe = df.describe(exclude='number')
                cat_describe = cat_describe.reset_index()
                cat_describe = cat_describe.rename(columns={'index' : 'Features'})
                cat_content = html.Div([
                    html.H1("Data About the Non-Numerical Columns in {}".format(cache.get(session_id + '-name'))),
                    #Show the contents of cat_describe
                    dash_table.DataTable(
                        data=cat_describe.to_dict('records'),
                        columns=[{'name': i, 'id': i} for i in cat_describe.columns],
                        #Fix the First column containing the feature indexes
                        fixed_columns={ 'headers': True, 'data': 1 },
                        style_table={'min-width' : '100%'},
                        style_cell={
                            'minWidth' : '100px',
                        },
                        style_data_conditional=[
                        {
                            'if': {'row_index': 'odd'},
                            'backgroundColor': 'rgb(248, 248, 248)'
                        }
                    ],
                    ),
                ]
            )
            else:
                cat_content = None
            return html.Div([
                html.H1("Data About the Numerical Columns in {}".format(cache.get(session_id + '-name'))),
                #Show the contents of num_describe in a data table
                dash_table.DataTable(
                    data=num_describe.to_dict('records'),
                    columns=[{'name': i, 'id': i} for i in num_describe.columns],
                    #Fix the First column containing the feature indexes
                    fixed_columns={ 'headers': True, 'data': 1 },
                    style_table={'min-width' : '100%'},
                    style_cell={
                        'minWidth' : '100px',
                    },
                    style_data_conditional=[
                        {
                            'if': {'row_index': 'odd'},
                            'backgroundColor': 'rgb(248, 248, 248)'
                        }
                    ],
                ),
                cat_content,
            ], className='description')
    elif tab == 'scatterplot-matrix':
        if df is None:
            #Leave a message as there is no data
            return html.Div([
                dcc.Markdown('''
                ## No Data Uploaded
                Please go to **Upload Your Data** and select an Excel or CSV file to upload
                Once you have done this, a scatter plot matrix will appear here.
                '''),
            ])
        else:
            num_column_names = df.select_dtypes(include='number').columns.values
            return html.Div([
                html.Div([
                    html.H3("Choose Your Features"),
                    dcc.Dropdown(
                        id='splom-column',
                        options=[{'label': i, 'value': i} for i in num_column_names],
                        value=[num_column_names[0]],
                        multi=True,
                    ),
                ], className='splom-choices'),
                html.Div([
                    html.H3("Choose your Colorscale"),
                    dcc.Dropdown(
                        id='splom-colorscale',
                        options=COLORSCALES_DICT,
                        value='Greys',
                    ),
                ], className='splom-choices'),
                html.Div([
                    html.H3("Choose the Feature for the Colour and Hovertext"),
                    dcc.Dropdown(
                        id='splom-color-chooser',
                        options=[{'label': i, 'value': i} for i in df.columns],
                        value=df.columns[0],
                    ),
                ], className='splom-choices'),
                dcc.Graph(id="scatter-matrix-fig"),
            ])

@app.callback([Output('upload-data-output', 'children'),
               Output('markdown-message', 'hidden')],
              [Input('data', 'contents'),
              Input('session_id', 'children')],
              [State('data', 'filename'),
               State('data', 'last_modified')])
def update_output(content, session, name, date):
    if content is not None:
        return parse_contents(content, session, name, date), True

@app.callback(Output('scatter-matrix-fig', 'figure'),
              [Input('session_id', 'children'),
              Input('splom-column', 'value'),
              Input('splom-colorscale', 'value'),
              Input('splom-color-chooser', 'value')])
def render_splom(session_id, columns, colorscale, color):
    #Get the dataframe
    df = cache.get(session_id + '-df')
    #Get all the number columns
    num_column_names = df.select_dtypes(include='number').columns.values
    #If we choose a categorical variable for matching colors
    if color not in num_column_names:
        #Show scale is false
        showscale=False
        #Get the category codes
        marker_color = df[color].astype('category').cat.codes

    else:
        marker_color = df[color]
        showscale = True

    
    return {'data': [
                go.Splom(
                    dimensions=[{'label': i, 'values': df[i]} for i in columns],
                    text=df[color],
                    marker=dict(
                        colorscale=colorscale,
                        color=marker_color,
                        showscale=showscale,
                    ),    
                )
            ],
            'layout' : go.Layout(
                title="Scatter Plot Matrix for {}".format(cache.get(session_id + '-name')),
                dragmode='select',
                width=1500,
                height=1000,
            )
        }

if __name__ == '__main__':
    app.run_server(debug=True)