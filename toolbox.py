import dash
import dash_html_components as html
import dash_core_components as dcc
import pandas as pd
import numpy as np
from datetime import datetime
import base64
import io
import dash_table
import plotly.graph_objs as go
import uuid
from flask_caching import Cache
import plotly.express as px
import dash_bootstrap_components as dbc
import colorlover as cl
import dash_daq as daq
from dash.dependencies import Input, Output, State

#Create the app
app = dash.Dash(__name__, external_stylesheets=['/assets/toolbox_menu.css'])
'''
Turn callback exceptions off as we are generating callbacks that 
refer to things generated by other callbacks.
WARNING: THIS DOES DISABLE OTHER WARNINGS OR EXCEPTIONS FOR CALLBACKS
NOT BEING FOUND INSIDE THE PYTHON FILE
'''
app.config['suppress_callback_exceptions']=True
#Create the cache needed to store the dataframe
cache = Cache(app.server, config={
    'CACHE_TYPE' : 'filesystem',
    'CACHE_DIR' : 'cache',
})
#Save the session!
cache.set('session', str(uuid.uuid4()))

#--------CONSTANT VARIABLES------------#
button_font_size='1.2em'
cardbody_font_size='1em'
cardheader_color='info'
cardbody_color='info'
main_panel_margin={'margin': '10px 0px'}
left_panel_margin={'width': '25%'}
right_panel_margin={'class': 'col-md-8', 'display':'block-inline'}
toggle_switch_color='#91c153'
line_style = ['Solid', 'Dash', 'Dot', 'Long Dash', 'Dash Dot', 'Long Dash Dot']
marker_symbols = ['Circle', 'Square', 'Diamond', 'Cross', 'X', 'Triangle-Up', 'Pentagon', 'Hexagon', 'Star']
default_alpha = 0.65
default_symbol_alpha = 1
box_color_saved = {}
percentile_color_saved = cl.to_rgb(cl.scales[str('5')]['qual']['Dark2'])
num_of_color=9
default_color = cl.to_rgb(cl.scales[str(num_of_color)]['qual']['Set1'])
dtick_value = None

# Initialising selected marker symbol
selected_marker_symbols = ['diamond', 'cross', 'triangle-up', 'star', 'x']
# generate default colors list
col_idx = 0
for i in default_color:
    start_idx = i.find('(')
    i = i[start_idx+1:len(i)-1]
    i = i.split(",")
    i = 'rgba({},{},{},{})'.format(i[0], i[1], i[2], default_alpha)
    default_color[col_idx] = i
    col_idx += 1

col_idx = 0
for i in percentile_color_saved:
    start_idx = i.find('(')
    i = i[start_idx+1:len(i)-1]
    i = i.split(",")
    i = 'rgba({},{},{},{})'.format(i[0], i[1], i[2], default_symbol_alpha)
    percentile_color_saved[col_idx] = i
    col_idx += 1

COLORSCALES_DICT = [
    {'value': 'Blackbody', 'label': 'Blackbody'},
    {'value': 'Bluered', 'label': 'Bluered'},
    {'value': 'Blues', 'label': 'Blues'},
    {'value': 'Earth', 'label': 'Earth'},
    {'value': 'Electric', 'label': 'Electric'},
    {'value': 'Greens', 'label': 'Greens'},
    {'value': 'Greys', 'label': 'Greys'},
    {'value': 'Hot', 'label': 'Hot'},
    {'value': 'Jet', 'label': 'Jet'},
    {'value': 'Picnic', 'label': 'Picnic'},
    {'value': 'Portland', 'label': 'Portland'},
    {'value': 'Rainbow', 'label': 'Rainbow'},
    {'value': 'RdBu', 'label': 'RdBu'},
    {'value': 'Reds', 'label': 'Reds'},
    {'value': 'Viridis', 'label': 'Viridis'},
    {'value': 'YlGnBu', 'label': 'YlGnBu'},
    {'value': 'YlOrRd', 'label': 'YlOrRd'},
]

line_style = ['Solid', 'Dash', 'Dot', 'Long Dash', 'Dash Dot', 'Long Dash Dot']
marker_symbols = ['Circle', 'Square', 'Diamond', 'Cross', 'X', 'Triangle-Up', 'Pentagon', 'Hexagon', 'Star']

#----------BOOTSTRAP FUNCTIONS----------#
# Function: Render drop down list
# Input: id, [options]
# Output: dcc.Dropdown
def render_dropdown(id, options):
    return dcc.Dropdown(id=id, options=[{'label': i, 'value': i} for i in options],
        className='card h-100' )

# Function: Render drop down list without any options
# Input: id
# Output: dcc.Dropdown
def render_dropdown_blank(id):
    return dcc.Dropdown(id=id)

# Function: Render drop down list with selected value
# Input: id, [options], value
# Output: dcc.Dropdown
def render_dropdown_valued(id, options, value):
    return dcc.Dropdown(id=id, options=[{'label': i, 'value': i} for i in options], value=value,
        className='card h-100' )

# Function: Render drop down list with label formatting (remove space between words and turn to lower case)
# Input: id, [options]
# Output: dcc.Dropdown
def render_dropdown_format(id, options):
    return dcc.Dropdown(id=id, options=[{'label': i, 'value': (i.replace(" ", "")).lower()} for i in options],
        className='card h-100' )

# Function: Render radio items
# Input: id, [options]
# Output: dcc.RadioItems
def render_radio(id, options):
    return dcc.RadioItems(id=id, options=[{'label': i, 'value': i} for i in options],
        value=str(options[0]), labelStyle={'display': 'block'} )

# Function: Render radio items for data points and outlies
# Input: id
# Output: dcc.RadioItems
def render_radio_outliers(id):
    return dcc.RadioItems(
        id=id,
        options=[
            {'label': 'Default', 'value': 'outliers'},
            {'label': 'Only Wiskers', 'value': 'False'},
            {'label': 'Suspected Outliers', 'value': 'suspectedoutliers'},
            {'label': 'All Points', 'value': 'all'},
        ],
        value='outliers',
        labelStyle={'display': 'block'} )

# Function: Render radio items contain id only
# Input: id
# Output: dcc.RadioItems
def render_radio_blank(id):
    return dcc.RadioItems(id=id, labelStyle={'display': 'block'} )

# Function: Render radio items with label formatting (remove space between words and turn to lower case)
# Input: id, [options]
# Output: dcc.RadioItems
def render_radio_format(id, options):
    return dcc.RadioItems(
        id=id,
        options=[{'label': i, 'value': (i.replace(" ", "")).lower()} for i in options],
        value=(str(options[0]).replace(" ", "")).lower(),
        labelStyle={'display': 'block'}, )

# Function: Render text input
# Input: id, placeholder
# Output: dcc.Input
def render_input(id, placeholder):
    return dcc.Input(id=id, type='text', placeholder=placeholder, style={'width': '100%'})

# Function: Render number input
# Input: id, placeholder
# Output: dcc.Input
def render_input_number(id, placeholder):
    return dcc.Input(id=id, type='number', min=0, placeholder=placeholder, style={'width': '100%'})

# Function: Render text input with delay feature, will callback after enter key pressed or input area loss its focus
# Input: id, placeholder
# Output: dcc.RadioItems
def render_input_delay(id, placeholder):
    return dcc.Input(id=id, type='text', placeholder=placeholder, debounce=True, style={'width': '100%'})

# Function: Render toggle switch
# Input: id, [labels], value
# Output: daq.ToggleSwitch
def render_toggleswitch(id, labels, value):
    return daq.ToggleSwitch(id=id, label=labels, value=value, color=toggle_switch_color, )

# Function: Render boolean switch
# Input: id, label, on
# Output: daq.BooleanSwitch
def render_booleanswitch(id, label, on):
    return daq.BooleanSwitch(id=id, label=label, on=on, labelPosition='top', color=toggle_switch_color, )

# Function: Render boolean switch without label
# Input: id, on
# Output: daq.BooleanSwitch
def render_booleanswitch_nolab(id, on):
    return daq.BooleanSwitch(id=id, on=on, color=toggle_switch_color, )

# Function: Render slider
# Input: id, min, max, value, step, label
# Output: daq.Slider
def render_slider(id, min, max, value, step, marks):
    mymark={}
    for i in marks:
        mymark[i]=str(i)
    return daq.Slider(id=id, min=min, max=max, value=value, step=step, marks=mymark )

# Function: Render Range slider
# Input: id, min, max, [value], step, {marks}
# Output: dcc.RangeSlider
def render_range_slider(id, min, max, value, step, marks):
    return dcc.RangeSlider(id=id, min=min, max=max, value=value, step=step, marks=marks )

# Function: Render color picker
# Input: id, min, max, value, step, label
# Output: daq.ColorPicker
def render_colorpicker(id, color, r, g, b, a):
    value=dict(rgb=dict(r=r, g=g, b=b, a=a))
    return daq.ColorPicker(id=id, value=value)

# Function: Render numeric Input
# Input: id, min, max, value
# Output: daq.NumericInput
def render_numinput(id, min, max, value):
    return daq.NumericInput(id=id, min=min, max=max, value=value )

#----------THE APP LAYOUT----------#
#Begin the layout of the app layout
app.layout = html.Div(children = [
    #Create the header
    html.Div(
        className = "header",
        children = [
            html.Img(
                src="https://skyraidnextcloud.duckdns.org/index.php/s/Axc37NW9wjaKMyr/preview",
                className="header-logo"
            ),
            html.H1("Earth Science Toolbox", className="header-title"),
        ]),
    #Add tabs to the page
    dcc.Tabs(
        id="tabs-styled-with-inline", 
        #Sets the default tab to open first
        value='upload',
        parent_className='custom-tabs', 
        className ='custom-tabs-container',
        children=[
            #Each tab has a label and different value, the value will determine what the output is
            dcc.Tab(label='Data Upload', value='upload', className='custom-tab', selected_className='custom-tab--selected'),
            dcc.Tab(label='Scatter Plot', value='scatter', className='custom-tab', selected_className='custom-tab--selected'),
            dcc.Tab(label='Line Plot', value='line', className='custom-tab', selected_className='custom-tab--selected'),
            dcc.Tab(label='Box and Whisker Plot', value='box', className='custom-tab', selected_className='custom-tab--selected'),
            dcc.Tab(label='Bar Plot', value='bar', className='custom-tab', selected_className='custom-tab--selected'),
        ]),
    #The HTML Division to show the content
    html.Div(
        id='tabs-content-inline',
        className="custom-tabs-inline",
    )
])
#Callbacks for the tabs
@app.callback(Output('tabs-content-inline', 'children'),
              [Input('tabs-styled-with-inline', 'value')])
def render_content(tab):
    #Based on the value of the tabs....
    if tab == 'upload':
        #If Upload is selected then show the content for uploading and data cleaning recommendation
        return html.Div([
            dcc.Tabs(
                id='tabs-styled-in-upload',
                value='upload-data',
                className="custom-tabs-container-upload",
                #Tabs for inside the Data Cleaning Recommendation Page
                children=[
                    dcc.Tab(label='Upload Your Data', value='upload-data', className='custom-tab-upload', selected_className='custom-tab--selected-upload'),
                    dcc.Tab(label='Your Uploaded Data', value='uploaded', className='custom-tab-upload', selected_className='custom-tab--selected-upload'),
                    dcc.Tab(label='Basic Description of Data', value='description', className='custom-tab-upload', selected_className='custom-tab--selected-upload'),
                    dcc.Tab(label='Scatter Plot Matrix', value='scatterplot-matrix', className='custom-tab-upload', selected_className='custom-tab--selected-upload'),
                ],
            ),
             #The HTML Division to show the content
            html.Div(
                id='tabs-content-upload',
                className="custom-tabs-upload",
            ),
        ])
    elif tab == 'scatter':
        return html.Div([
            html.H3('Tab content 2')
        ])
    elif tab == 'line':
        return html.Div([
            html.H3('Tab content 3')
        ])
    elif tab == 'box':
        session = cache.get('session')
        df = cache.get(session + '-df')
        if df is None:
            return dcc.Markdown('''
            # No Data Uploaded

            If you're seeing this message, then you haven't uploaded any data yet

            Please do so by navigating to the Data Upload and uploading some data.

            When you are ready, come back here to create a Box and Whisker Plot.
            ''')
        else:
            features = df.select_dtypes(include='number').columns.values
            cat_features = cat_features = df.select_dtypes(exclude=['number', 'datetime', 'datetime64']).columns.values
            return  html.Div(className='row', children=[
                        html.Div(children=[
                            html.Div(className='container', children=[
                                html.Div(className='accordion', children=[
                                    dbc.Card([
                                        dbc.CardHeader(
                                            dbc.Button("Select Data", id='group-1-toggle', color=cardheader_color, style={'font-size': button_font_size}, block=True,
                                            )
                                        ),
                                        dbc.Collapse(
                                            dbc.CardBody(children=[
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Variable')),
                                                    dbc.CardBody(children=render_dropdown_valued('select-variable', features, features[0]))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px', 'height': '30em'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Group by')),
                                                    dbc.CardBody(children=render_dropdown_valued('select-groupby', cat_features, cat_features[0]))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px', 'height': '30em'}
                                                )
                                            ]),
                                            id='collapse-1'
                                        ),
                                    ], color=cardbody_color, outline=True, style={'font-size': cardbody_font_size} ),
                                    dbc.Card([
                                        dbc.CardHeader(
                                            dbc.Button(
                                                "Plot Setting", id='group-3-toggle', color=cardheader_color, style={'font-size': button_font_size}, block=True,
                                            )
                                        ),
                                        dbc.Collapse(
                                            dbc.CardBody(children=[
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Graph Orientation')),
                                                    dbc.CardBody(children=render_toggleswitch('graph-alignment', ['Vertical', 'Horizontal'], False))
                                                ], style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Legend')),
                                                    dbc.CardBody(children=render_booleanswitch_nolab('show-legend', True))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Grid Lines')),
                                                    dbc.CardBody(children=render_booleanswitch_nolab('show-gridlines', True))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('X Zero Line')),
                                                    dbc.CardBody(children=render_booleanswitch_nolab('show-zeroline-x', True))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Y Zero Line')),
                                                    dbc.CardBody(children=render_booleanswitch_nolab('show-zeroline-y', True))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Grid Width')),
                                                    dbc.CardBody(children=render_numinput('grid-width', 1, 5, 1))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Tick Step')),
                                                    dbc.CardBody(children=render_input_number('delta-tick', 'Tick Step'))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px'}
                                                ),
                                            ]),
                                            id='collapse-3'
                                        ),
                                    ], color='info', outline=True, style={'font-size': cardbody_font_size} ),
                                    dbc.Card([
                                        dbc.CardHeader(
                                            dbc.Button(
                                                "Statistic Information", id='group-4-toggle', color=cardheader_color, style={'font-size': button_font_size}, block=True,
                                            )
                                        ),
                                        dbc.Collapse(
                                            dbc.CardBody(children=[
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Data Transformation')),
                                                    dbc.CardBody(children=render_toggleswitch('data-transform', ['Linear', 'Logarithmic'], False))
                                                ], style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Boxplot type')),
                                                    dbc.CardBody(children=render_radio_outliers('select-outliers'))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Frequency')),
                                                    dbc.CardBody(children=render_booleanswitch_nolab('show-ndata', True))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Mean')),
                                                    dbc.CardBody(children=render_booleanswitch_nolab('show-mean', False))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Std. Dev.')),
                                                    dbc.CardBody(children=render_booleanswitch_nolab('show-sd', False))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Summary Stats')),
                                                    dbc.CardBody(children=render_booleanswitch_nolab('show-stats', False))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px'}
                                                ),
                                            ]),
                                            id='collapse-4'
                                        ),
                                    ], color=cardbody_color, outline=True, style={'font-size': cardbody_font_size} ),
                                    dbc.Card([
                                        dbc.CardHeader(
                                            dbc.Button(
                                                "Percentiles", id='group-7-toggle', color=cardheader_color, style={'font-size': button_font_size}, block=True,
                                            )
                                        ),
                                        dbc.Collapse(
                                            dbc.CardBody(children=[
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Show Percentiles')),
                                                    dbc.CardBody(children=render_booleanswitch_nolab('show-percentiles', False))
                                                ], style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Percentile')),
                                                    dbc.CardBody(children=render_dropdown('select-percentile', ['5%', '10%', '90%', '95%']))
                                                ], style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Marker Symbol')),
                                                    dbc.CardBody(children=render_dropdown_format('marker-symbol', marker_symbols))
                                                ], style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Symbol Size'), className='card w-100'),
                                                    dbc.CardBody(children=render_numinput('symbol-size', 1, 15, 8))
                                                ], style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Color')),
                                                    dbc.CardBody(children=render_colorpicker('select-percentile-color', 'white', 100, 200, 255, 0.65))
                                                ],
                                                ),
                                            ]),
                                            id='collapse-7'
                                        ),
                                    ], color=cardbody_color, outline=True, style={'font-size': cardbody_font_size} ),
                                    dbc.Card([
                                        dbc.CardHeader(
                                            dbc.Button(
                                                "Threshold Setting", id='group-5-toggle', color=cardheader_color, style={'font-size': button_font_size}, block=True,
                                            )
                                        ),
                                        dbc.Collapse(
                                            dbc.CardBody(children=[
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Threshold')),
                                                    dbc.CardBody(children=render_booleanswitch_nolab('show-treshold', False))
                                                ], style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Value')),
                                                    dbc.CardBody(children=render_input('treshold-value', 'Threshold Value'))
                                                ], className='col-md-6'
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Line Size')),
                                                    dbc.CardBody(children=render_numinput('treshold-line-size', 1, 10, 2))
                                                ], className='col-md-6', style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Line Style')),
                                                    dbc.CardBody(children=render_dropdown_format('treshold-style', line_style))
                                                ], style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Line Color')),
                                                    dbc.CardBody(children=render_colorpicker('treshold-line-color', 'white', 0, 0, 255, 1))
                                                ], style={'margin': '0px 0px 10px 0px'}
                                                ),
                                            ]),
                                            id='collapse-5'
                                        ),
                                    ], color=cardbody_color, outline=True, style={'font-size': cardbody_font_size} ),
                                    dbc.Card([
                                        dbc.CardHeader(
                                            dbc.Button(
                                                "Box Color", id='group-6-toggle', color=cardheader_color, style={'font-size': button_font_size}, block=True,
                                            )
                                        ),
                                        dbc.Collapse(
                                            dbc.CardBody(children=[
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Fill')),
                                                    dbc.CardBody(children=render_toggleswitch('box-color-fill', ['Transparent', 'Colored'], True))
                                                ], style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Select Box'), className='card w-100'),
                                                    dbc.CardBody(children=render_dropdown_blank('select-box'))
                                                ], style={'margin': '0px 0px 10px 0px'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Color')),
                                                    dbc.CardBody(children=render_colorpicker('box-color', 'white', 0, 0, 255, 0.65))
                                                ],
                                                ),
                                            ]),
                                            id='collapse-6'
                                        ),
                                    ], color=cardbody_color, outline=True, style={'font-size': cardbody_font_size} ),
                                    dbc.Card([
                                        dbc.CardHeader(
                                            dbc.Button("Graph Size", id='group-2-toggle', color=cardheader_color, style={'font-size': button_font_size}, block=True,
                                            )
                                        ),
                                        dbc.Collapse(
                                            dbc.CardBody(children=[
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Graph Height')),
                                                    dbc.CardBody(children=render_slider('graph-height', 600, 1200, 600, 50, [600, 700, 800, 900, 1000, 1100, 1200]), style={'padding':'5% 5% 10% 5%'})
                                                ], style={'width': '100%'}
                                                ),
                                                dbc.Card([
                                                    dbc.CardHeader(html.H5('Graph Width')),
                                                    dbc.CardBody(children=render_slider('graph-width', 800, 1400, 800, 50, [800, 900, 1000, 1100, 1200, 1300, 1400]), style={'padding':'5% 5% 10% 5%'})
                                                ], style={'width': '100%'}
                                                ),
                                            ]),
                                            id='collapse-2'
                                        ),
                                    ], color=cardbody_color, outline=True, style={'font-size': cardbody_font_size} ),
                                ])
                            ])
                        ], className='col-md-3'
                        ),
                        html.Div(children=[
                            dbc.Row(children=[
                                dcc.Graph(id='box-plot',
                                        style={'width' : '90%', 'padding-left' : '3%'},
                                        config={'editable' : True, 'toImageButtonOptions': {'scale' : 10},'edits' : {'titleText': True}},
                                ),
                            ])
                        ]),
                    ], style=main_panel_margin)

    elif tab == 'bar':
        return html.Div([
            html.H3('Tab content 4')
        ])


'''
#------------------ DATA CLEANING RECOMMENDATION PAGE AND DATA UPLOAD --------------------------------#
Content for the Data Upload Page is below
Please look into the comments for what each one is for
Some of it is derived by https://dash.plot.ly/dash-core-components/upload
As it provides a good base to start from in order to upload files.
'''
def parse_contents(contents, filename, date):
    content_type, content_string = contents.split(',')
    session_id = cache.get('session')
    decoded = base64.b64decode(content_string)
    try:
        if 'csv' in filename:
            # Assume that the user uploaded a CSV file
            df = pd.read_csv(io.StringIO(decoded.decode('utf-8')))
        elif 'xls' in filename:
            # Assume that the user uploaded an excel file
            df = pd.read_excel(io.BytesIO(decoded))
        elif 'xlsx' in filename:
            # Assume that the user uploaded an excel file
            df = pd.read_excel(io.BytesIO(decoded))

        #Add Filename to cache
        cache.set(session_id + '-name', filename)
        #Add File Last Modified Datetime to cache
        cache.set(session_id + '-date', str(datetime.fromtimestamp(date)))
        #Add Dataframe to Cache
        cache.set(session_id + '-df', df)
        

        return html.Div([
                #Show the uploaded file name and last modified timestamp
                html.H3("Uploaded File: {}".format(filename)),
                html.H3("Last Modified: {}".format(str(datetime.fromtimestamp(date)))),
            ]
        )
        
    #If an exception occured when uploading the file
    except Exception as e:
        #Print the exception in the terminal
        print(e)
        #Let User know there was a problem
        return html.Div([
            'There was an error processing this file.'
        ])

@app.callback(Output('tabs-content-upload', 'children'),
              [Input('tabs-styled-in-upload', 'value')])
def render_upload_content(tab):
    #Retrieve the Dataframe from Cache
    session_id = cache.get('session')
    df = cache.get(session_id + '-df')
    if tab == "upload-data":
        #If no data has been uploaded then show the content below
        if df is None:
            return html.Div([
                    #The upload area!
                    html.H1('Upload Your Dataset'),
                    #Click on it or drag and drop into it
                    dcc.Upload(
                        id = 'data',
                        children=html.Div(['Drag and Drop or ', html.A('Select Files')]),
                        className='data-upload',
                    ),
                    #Here is our no file uploaded message
                    html.Div(id='markdown-message', children=[
                        dcc.Markdown("""
                            If you are seeing this message, then you haven't uploaded any data.

                            Please use the box above to drag a file into the box, or

                            Click on the box to select a file from your device.

                            Files should be **Excel** (.xls or .xlsx) or **CSV** (.csv).
                            """)
                    ]),
                    #The output to show filename and data last modified date
                    html.Div(id='upload-data-output'),
                ]
            )
        else:
            #I dislike repeating code, but it works as it should, its not worth the extra effort to condense it right now
            return html.Div([
                #The upload area!
                    html.H1('Upload Your Dataset'),
                    dcc.Upload(
                        id = 'data',
                        children=html.Div(['Drag and Drop or ', html.A('Select Files')]),
                        className='data-upload',
                    ),
                    #Our message shows the cached content, will be hidden when things change
                    html.Div(id='markdown-message', children=[
                        html.H3("Uploaded File: {}".format(cache.get(session_id + '-name'))),
                        html.H3("Last Modified: {}".format(cache.get(session_id + '-date'))),
                    ]),
                    #Show the uploaded file name and last modified timestamp 
                    html.Div(id='upload-data-output'),
                ],
            )
    elif tab == 'uploaded':
        if df is None:
            #Take a look at the uploaded data in a table
            return html.Div([
                #However if we have no data, we leave a message.
                dcc.Markdown('''
                ## No Data Uploaded
                Please go to **Upload Your Data** and select an Excel or CSV file to upload
                Once you have done this, your data will appear here.
                '''),
            ])
        else:
            #Create the conditionals list of dictionaries, starting by highlighting each odd row
            conditionals = [
                {
                    'if': {'row_index': 'odd'},
                    'backgroundColor': 'rgb(248, 248, 248)'
                },
            ]
            #Create the conditionals to highlight the cells which are empty
            for col in df.columns:
                conditionals.append(
                    {
                        #If the data in the cell is None, NaN, NA, null then highlight in orange red
                        'if': {
                            'column_id': col,
                            'filter_query': '{{{}}} is nil'.format(col)
                        },
                    'backgroundColor': 'orangered'
                    }
                )
            #Get the size of the dataframe in number of cells
            size = df.shape[0] * df.shape[1]
            #Get the number of missing cells (its a sum of the missing cells in each column)
            missing_cells = df.isna().sum().sum()
            #Put it in terms of percentage to 3 decimal places.
            missing_stat = round((missing_cells / size)*100,3)

            return html.Div([
                #Give some headers and show filename and date last modified
                html.H1("Your Uploaded Data"),
                html.P("It contains {} cells, of which {} are missing values.".format(size, missing_cells)),
                html.P("The missing data accounts for {}% of the data set.".format(missing_stat)),
                #Show the data
                dash_table.DataTable(
                    data=df.to_dict('records'),
                    columns=[{'name': i, 'id': i} for i in df.columns],
                    #Fix the headers on the table
                    fixed_rows={ 'headers': True, 'data': 0 },
                    #Ensure scrolling for smaller screens, but also ensure it fills the container
                    style_table={
                        'overflowX' : 'scroll', 
                        'overflowY' : 'scroll',
                        'mid-width' : '90%',
                        'min-height' : '70%',
                    },
                    #Each cell should be a minimum of 100 pixels in width
                    style_cell={
                        'minWidth' : '100px',
                    },
                    #Apply the conditionals to the cells to highlight missing values
                    style_data_conditional=conditionals,
                    #Chnage the style of the header
                    style_header={
                        'backgroundColor': 'rgb(230, 230, 230)',
                        'fontWeight': 'bold'
                    }
                ),
            ])
    elif tab == 'description':
        if df is None:
            return html.Div([
                #There is no data so leave a message
                dcc.Markdown('''
                ## No Data Uploaded
                Please go to **Upload Your Data** and select an Excel or CSV file to upload
                Once you have done this, your data description will appear here.
                '''),
            ])
        else:
            #Use describe to get basic stats from numerical columns including percentiles
            num_describe = df.describe(percentiles=[0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95])
            #Reset the index to have the Features column appear in describe result
            num_describe = num_describe.reset_index()
            #Rename the index column to Features
            num_describe = num_describe.rename(columns={'index' : 'Features'})
            #Check if all the columns are numerical, if they're not then generate information about the rest
            if len(df.select_dtypes(include='number').columns.values) != len(df.columns):
                #Now apply the same steps but for categorical columns too
                cat_describe = df.describe(exclude='number')
                cat_describe = cat_describe.reset_index()
                cat_describe = cat_describe.rename(columns={'index' : 'Features'})
                cat_content = html.Div([
                    html.H1("Data About the Non-Numerical Columns in {}".format(cache.get(session_id + '-name'))),
                    #Show the contents of cat_describe
                    dash_table.DataTable(
                        data=cat_describe.to_dict('records'),
                        columns=[{'name': i, 'id': i} for i in cat_describe.columns],
                        #Fix the First column containing the feature indexes
                        fixed_columns={ 'headers': True, 'data': 1 },
                        style_table={'min-width' : '100%'},
                        style_cell={
                            'minWidth' : '100px',
                        },
                        style_data_conditional=[
                        {
                            'if': {'row_index': 'odd'},
                            'backgroundColor': 'rgb(248, 248, 248)'
                        }
                    ],
                    ),
                ]
            )
            else:
                cat_content = None
            return html.Div([
                html.H1("Data About the Numerical Columns in {}".format(cache.get(session_id + '-name'))),
                #Show the contents of num_describe in a data table
                dash_table.DataTable(
                    data=num_describe.to_dict('records'),
                    columns=[{'name': i, 'id': i} for i in num_describe.columns],
                    #Fix the First column containing the feature indexes
                    fixed_columns={ 'headers': True, 'data': 1 },
                    style_table={'min-width' : '100%'},
                    style_cell={
                        'minWidth' : '100px',
                    },
                    style_data_conditional=[
                        {
                            'if': {'row_index': 'odd'},
                            'backgroundColor': 'rgb(248, 248, 248)'
                        }
                    ],
                ),
                cat_content,
            ], className='description')
    elif tab == 'scatterplot-matrix':
        if df is None:
            #Leave a message as there is no data
            return html.Div([
                dcc.Markdown('''
                ## No Data Uploaded
                Please go to **Upload Your Data** and select an Excel or CSV file to upload
                Once you have done this, a scatter plot matrix will appear here.
                '''),
            ])
        else:
            num_column_names = df.select_dtypes(include='number').columns.values
            return html.Div([
                html.Div([
                    html.H3("Choose Your Features"),
                    dcc.Dropdown(
                        id='splom-column',
                        options=[{'label': i, 'value': i} for i in num_column_names],
                        value=[num_column_names[0]],
                        multi=True,
                    ),
                ], className='splom-choices'),
                html.Div([
                    html.H3("Choose your Colorscale"),
                    dcc.Dropdown(
                        id='splom-colorscale',
                        options=COLORSCALES_DICT,
                        value='Greys',
                    ),
                ], className='splom-choices'),
                html.Div([
                    html.H3("Choose the Feature for the Colour and Hovertext"),
                    dcc.Dropdown(
                        id='splom-color-chooser',
                        options=[{'label': i, 'value': i} for i in df.columns],
                        value=df.columns[0],
                    ),
                ], className='splom-choices'),
                dcc.Graph(id="scatter-matrix-fig"),
            ])

@app.callback([Output('upload-data-output', 'children'),
               Output('markdown-message', 'hidden')],
              [Input('data', 'contents')],
              [State('data', 'filename'),
               State('data', 'last_modified')]
            )
def update_output(content, name, date):
    if content is not None:
        return parse_contents(content, name, date), True

@app.callback(Output('scatter-matrix-fig', 'figure'),
              [Input('splom-column', 'value'),
              Input('splom-colorscale', 'value'),
              Input('splom-color-chooser', 'value')])
def render_splom(columns, colorscale, color):
    #Get the dataframe
    session_id = cache.get('session')
    df = cache.get(session_id + '-df')
    #Get all the number columns
    num_column_names = df.select_dtypes(include='number').columns.values
    #If we choose a categorical variable for matching colors
    if color not in num_column_names:
        #Show scale is false
        showscale=False
        #Get the category codes
        marker_color = df[color].astype('category').cat.codes
        #Show the legend
        showlegend = True

    else:
        marker_color = df[color]
        showscale = True
        #Show legend is false
        showlegend = False


    
    return {'data': [
                go.Splom(
                    dimensions=[{'label': i, 'values': df[i]} for i in columns],
                    text=df[color],
                    marker=dict(
                        colorscale=colorscale,
                        color=marker_color,
                        showscale=showscale,
                        colorbar={'title' : color},

                    ),    
                )
            ],
            'layout' : go.Layout(
                title="Scatter Plot Matrix for {}".format(cache.get(session_id + '-name')),
                dragmode='select',
                width=1500,
                height=900,
            )
        }

'''
#---------------------BOX PLOT CALLBACKS--------------------#
The following was coded by Demas Dasa (this includes the layout for the Box Plot), 
these are all the callbacks for the plot below.
'''
@app.callback(
    [Output(f'collapse-{i}', 'is_open') for i in range(1,8)],
    [Input(f'group-{i}-toggle', 'n_clicks') for i in range(1,8)],
    [State(f'collapse-{i}', 'is_open') for i in range(1,8)]
)
def toggle_accordion(n1, n2, n3, n4, n5, n6, n7, is_open1, is_open2, is_open3, is_open4, is_open5, is_open6, is_open7):
    ctx = dash.callback_context

    if not ctx.triggered:
        return ""
    else:
        button_id = ctx.triggered[0]['prop_id'].split('.')[0]

    if button_id ==  'group-1-toggle' and n1:
        return not is_open1, False, False, False, False, False, False
    elif button_id ==  'group-2-toggle' and n2:
        return False, not is_open2, False, False, False, False, False
    elif button_id ==  'group-3-toggle' and n3:
        return False, False, not is_open3, False, False, False, False
    elif button_id ==  'group-4-toggle' and n4:
        return False, False, False, not is_open4, False, False, False
    elif button_id ==  'group-5-toggle' and n5:
        return False, False, False, False, not is_open5, False, False
    elif button_id ==  'group-6-toggle' and n6:
        return False, False, False, False, False, not is_open6, False
    elif button_id ==  'group-7-toggle' and n7:
        return False, False, False, False, False, False, not is_open7
    return False, False, False, False, False, False, False

# Update marker symbol when percentile selected
@app.callback(
    Output('marker-symbol', 'value'),
    [Input('select-percentile', 'value')]
)
def update_marker_symbol(percentile):
    i = 0
    if percentile == '5%':
        i = 0
    elif percentile == '10%':
        i = 1
    elif percentile == '90%':
        i = 2
    else:
        i = 3
    return selected_marker_symbols[i]

# Update Percentile Symbol Color Picker
@app.callback(
    Output('select-percentile-color', 'value'),
    [Input('select-percentile', 'value')]
)
def update_percentile_color_selector(percentile):
    i = 0
    if percentile == '5%':
        i = 0
    elif percentile == '10%':
        i = 1
    elif percentile == '90%':
        i = 2
    else:
        i = 3

    temp_str = percentile_color_saved[i]
    start_idx = temp_str.find('(')
    temp_str = temp_str[start_idx+1:len(temp_str)-1]
    temp_str = temp_str.split(",")
    temp_str = dict(rgb=dict(r=temp_str[0], g=temp_str[1], b=temp_str[2], a=temp_str[3]))
    return temp_str


# Turn Y Tick Disabled when in Logarithmic and Enabled when in Linear
# Turn Y Tick Value to None when in Logarithmic end recall previous value when turn back to Linear
@app.callback(
    [Output('delta-tick', 'disabled'),
     Output('delta-tick', 'value')],
    [Input('data-transform', 'value')]
)
def update_delta_tick_disabled(is_log):
    return is_log, None if is_log else dtick_value

# Box Color Selector Callback
@app.callback(
    Output('box-color', 'value'),
    [Input('select-box', 'value')])
def update_box_color_selector(box):
    temp_str = box_color_saved.get(box, dict(rgb=dict(r=222, g=110, b=75, a=default_alpha)))
    if isinstance(temp_str, str):
        start_idx = temp_str.find('(')
        temp_str = temp_str[start_idx+1:len(temp_str)-1]
        temp_str = temp_str.split(",")
        temp_str = dict(rgb=dict(r=temp_str[0], g=temp_str[1], b=temp_str[2], a=temp_str[3]))
    return temp_str

# Box Selector Callback
@app.callback(
    Output('select-box', 'options'),
    [Input('select-groupby', 'value')]
)
def update_select_box(groupby):
    session = cache.get('session')
    df = cache.get(session + '-df')
    idx = 0
    for i in df[groupby].unique():
        box_color_saved[i] = default_color[idx % num_of_color]
        idx += 1
    return [{'label': i, 'value': i} for i in df[groupby].unique()]

# Threshold Line Callback
@app.callback(
    Output('treshold-value', 'value'),
    [Input('show-treshold', 'on'),
     Input('select-variable', 'value'),
     ]
)
def update_treshold_value(
    is_tresholdshow, variable
):
    session = cache.get('session')
    df = cache.get(session + '-df')
    return np.around(np.mean(df[variable]), 0) if is_tresholdshow else ' '

# Statistics Show Hide Callback
@app.callback(
    Output('show-stats', 'on'),
    [Input('select-outliers', 'value'), ]
)
def update_showstat(outliersshow):
    return False if outliersshow == 'all' else None

# Figure Callback
@app.callback(
    Output('box-plot', 'figure'),
    [
        Input('select-variable', 'value'), Input('select-groupby', 'value'),
        Input('show-gridlines', 'on'),
        Input('show-zeroline-x', 'on'), Input('show-zeroline-y', 'on'),
        Input('show-legend', 'on'), Input('show-percentiles', 'on'),
        Input('graph-alignment', 'value'), Input('data-transform', 'value'),
        Input('select-outliers', 'value'), Input('show-ndata', 'on'),
        Input('show-percentiles', 'on'), Input('show-mean', 'on'),
        Input('show-sd', 'on'), Input('show-treshold', 'on'),
        Input('treshold-value', 'value'), Input('treshold-style', 'value'),
        Input('treshold-line-color', 'value'),
        Input('treshold-line-size', 'value'),
        Input('show-stats', 'on'), Input('graph-height', 'value'),
        Input('graph-width', 'value'),
        Input('select-box', 'value'), Input('box-color', 'value'),
        Input('grid-width', 'value'), Input('delta-tick', 'value'),
        Input('box-color-fill', 'value'),
        Input('select-percentile', 'value'), Input('marker-symbol', 'value'),
        Input('select-percentile-color', 'value'), Input('symbol-size', 'value'),
    ]
)
def update_figure(
    variable, groupby,
    gridshow, xzeroline, yzeroline, legendshow,
    datapointsshow, is_vertical, is_log, outliersshow, is_ndatashow,
    is_percentileshow, is_meanshow, is_sdshow, is_tresholdshow, treshold_value,
    treshold_style, treshold_color, treshold_size, is_statshow, graph_height,
    graph_width, selected_box, box_color, grid_width, dtick, is_color_filled,
    select_percentile, marker_symbol, select_percentile_color, symbol_size
):
    session = cache.get('session')
    df = cache.get(session + '-df')
    # Update dtick_value
    if dtick != None:
        dtick_value = dtick

    # Title and axises label modificator
    xaxis_title = groupby
    yaxis_title = variable
    main_title = str(variable + " VS " + groupby)

    # Outliers Selector
    showpoints = ""
    if (outliersshow == 'False'):
        showpoints = False
    elif (outliersshow == 'suspectedoutliers'):
        showpoints = outliersshow
    else:
        showpoints = outliersshow

    # Initialising data list
    group_list = df[groupby].unique()
    data_list = []
    n_data = []
    data_mean = []
    data_median = []
    data_max = []
    data_min = []
    percentile_5 = []
    percentile_10 = []
    percentile_90 = []
    percentile_95 = []
    percentile_25 = []
    percentile_75 = []
    annots_ndata = []
    annots_mean = []
    annots_median = []
    annots_max = []
    annots_min = []
    annots_p5 = []
    annots_p10 = []
    annots_p25 = []
    annots_p75 = []
    annots_p90 = []
    annots_p95 = []
    annots_idx = 0

    # Computing N Data
    max_n = df[variable].max()
    max_n = 1.05*np.log10(max_n) if is_log else 1.05*max_n

    picker_percentile_color = 'rgba({}, {}, {}, {})'.format(
        select_percentile_color['rgb']['r'],
        select_percentile_color['rgb']['g'],
        select_percentile_color['rgb']['b'],
        select_percentile_color['rgb']['a'],)

    picker_box_color = 'rgba({}, {}, {}, {})'.format(
        box_color['rgb']['r'],
        box_color['rgb']['g'],
        box_color['rgb']['b'],
        box_color['rgb']['a'],)

    color_idx = 0
    # Generate boxplot
    for i in group_list:
        if selected_box is not None:
            if i == selected_box:
                box_color_saved[i] = picker_box_color
        color_idx += 1

        if (not is_vertical):
            data_list.append(
                go.Box(
                    y=df[df[groupby] == i][variable],
                    name=i,
                    boxpoints=showpoints,
                    boxmean='sd' if is_sdshow else None,
                    marker_color=box_color_saved[i],
                    fillcolor=box_color_saved[i] if is_color_filled else 'rgba(255,255,255,0)',
                )
            )
        else:
            data_list.append(
                go.Box(
                    x=df[df[groupby] == i][variable],
                    name=i,
                    orientation='h',
                    boxpoints=showpoints,
                    boxmean='sd' if is_sdshow else None,
                    marker_color=box_color_saved[i],
                    fillcolor=box_color_saved[i] if is_color_filled else 'rgba(255,255,255,0)',
                )
            )

        # Counting percentiles
        percentile_5.append(np.around(np.percentile((df[df[groupby] == i][variable]), 5), 2))
        percentile_10.append(np.around(np.percentile((df[df[groupby] == i][variable]), 10), 2))
        percentile_90.append(np.around(np.percentile((df[df[groupby] == i][variable]), 90), 2))
        percentile_95.append(np.around(np.percentile((df[df[groupby] == i][variable]), 95), 2))
        percentile_25.append(np.around(np.percentile((df[df[groupby] == i][variable]), 25), 2))
        percentile_75.append(np.around(np.percentile((df[df[groupby] == i][variable]), 75), 2))
        data_max.append(np.around(np.max((df[df[groupby] == i][variable])), 2))
        data_min.append(np.around(np.min((df[df[groupby] == i][variable])), 2))

        # Calculating mean and median
        data_mean.append(np.around(np.mean((df[df[groupby] == i][variable])), 2))
        data_median.append(np.around(np.median((df[df[groupby] == i][variable])), 2))

        # Counting number of data for each category
        df_shape = df[df[groupby] == i][variable].shape
        n_data.append(df_shape[0])

        # Generating annotations of n of data
        annots_ndata.append(go.layout.Annotation(
            x=max_n if is_vertical else annots_idx,
            y=annots_idx if is_vertical else max_n,
            xref='x',
            yref='y',
            text='N = {}'.format(n_data[annots_idx]),
            showarrow=False,
            ax=0 if is_vertical else annots_idx,
            ay=annots_idx if is_vertical else 0,
            )
        )

        # Generating annotations of mean
        annots_mean.append(go.layout.Annotation(
            x=(np.log10(data_mean[annots_idx]) if is_log else data_mean[annots_idx]) if is_vertical else annots_idx,
            y=annots_idx if is_vertical else (np.log10(data_mean[annots_idx]) if is_log else data_mean[annots_idx]),
            xref='x',
            yref='y',
            text='Mean: {}'.format(data_mean[annots_idx]),
            showarrow=True,
            ax=0 if is_vertical else (100/len(group_list))*5,
            ay=(100/len(group_list))*2 if is_vertical else 0,
            arrowhead=7,
        ))

        # Generating annotations of mean
        annots_median.append(go.layout.Annotation(
            x=(np.log10(data_median[annots_idx]) if is_log else data_median[annots_idx]) if is_vertical else annots_idx,
            y=annots_idx if is_vertical else (np.log10(data_median[annots_idx]) if is_log else data_median[annots_idx]),
            xref='x',
            yref='y',
            text='Med: {}'.format(data_median[annots_idx]),
            showarrow=True,
            ax=0 if is_vertical else (-100/len(group_list))*4,
            ay=(-100/len(group_list))*2 if is_vertical else 0,
            arrowhead=7,
        ))

        # Generating annotations of percentile 5
        annots_p5.append(go.layout.Annotation(
            x=(np.log10(percentile_5[annots_idx]) if is_log else percentile_5[annots_idx]) if is_vertical else annots_idx,
            y=annots_idx if is_vertical else (np.log10(percentile_5[annots_idx]) if is_log else percentile_5[annots_idx]),
            xref='x',
            yref='y',
            text='P5: {}'.format(percentile_5[annots_idx]),
            showarrow=True,
            ax=0 if is_vertical else (-100/len(group_list))*4,
            ay=(-100/len(group_list))*2 if is_vertical else 0,
            arrowhead=7,
        ))

        # Generating annotations of percentile 10
        annots_p10.append(go.layout.Annotation(
            x=(np.log10(percentile_10[annots_idx]) if is_log else percentile_10[annots_idx]) if is_vertical else annots_idx,
            y=annots_idx if is_vertical else (np.log10(percentile_10[annots_idx]) if is_log else percentile_10[annots_idx]),
            xref='x',
            yref='y',
            text='P10: {}'.format(percentile_10[annots_idx]),
            showarrow=True,
            ax=0 if is_vertical else (100/len(group_list))*5,
            ay=(100/len(group_list))*2 if is_vertical else 0,
            arrowhead=7,
        ))

        # Generating annotations of percentile 25
        annots_p25.append(go.layout.Annotation(
            x=(np.log10(percentile_25[annots_idx]) if is_log else percentile_25[annots_idx]) if is_vertical else annots_idx,
            y=annots_idx if is_vertical else (np.log10(percentile_25[annots_idx]) if is_log else percentile_25[annots_idx]),
            xref='x',
            yref='y',
            text='Q1: {}'.format(np.around(percentile_25[annots_idx], 2)),
            showarrow=True,
            ax=0 if is_vertical else (-100/len(group_list))*4,
            ay=(-100/len(group_list))*2 if is_vertical else 0,
            arrowhead=7,
        ))

        # Generating annotations of percentile 75
        annots_p75.append(go.layout.Annotation(
            x=(np.log10(percentile_75[annots_idx]) if is_log else percentile_75[annots_idx]) if is_vertical else annots_idx,
            y=annots_idx if is_vertical else (np.log10(percentile_75[annots_idx]) if is_log else percentile_75[annots_idx]),
            xref='x',
            yref='y',
            text='Q3: {}'.format(np.around(percentile_75[annots_idx], 2)),
            showarrow=True,
            ax=0 if is_vertical else (100/len(group_list))*5,
            ay=(100/len(group_list))*2 if is_vertical else 0,
            arrowhead=7,
        ))

        # Generating annotations of percentile 90
        annots_p90.append(go.layout.Annotation(
            x=(np.log10(percentile_90[annots_idx]) if is_log else percentile_90[annots_idx]) if is_vertical else annots_idx,
            y=annots_idx if is_vertical else (np.log10(percentile_90[annots_idx]) if is_log else percentile_90[annots_idx]),
            xref='x',
            yref='y',
            text='P90: {}'.format(percentile_90[annots_idx]),
            showarrow=True,
            ax=0 if is_vertical else (-100/len(group_list))*4,
            ay=(-100/len(group_list))*2 if is_vertical else 0,
            arrowhead=7,
        ))

        # Generating annotations of percentile 95
        annots_p95.append(go.layout.Annotation(
            x=(np.log10(percentile_95[annots_idx]) if is_log else percentile_95[annots_idx]) if is_vertical else annots_idx,
            y=annots_idx if is_vertical else (np.log10(percentile_95[annots_idx]) if is_log else percentile_95[annots_idx]),
            xref='x',
            yref='y',
            text='P95: {}'.format(percentile_95[annots_idx]),
            showarrow=True,
            ax=0 if is_vertical else (100/len(group_list))*5,
            ay=(100/len(group_list))*2 if is_vertical else 0,
            arrowhead=7,
        ))

        # Generating annotations of max
        annots_max.append(go.layout.Annotation(
            x=(np.log10(data_max[annots_idx]) if is_log else data_max[annots_idx]) if is_vertical else annots_idx,
            y=annots_idx if is_vertical else (np.log10(data_max[annots_idx]) if is_log else data_max[annots_idx]),
            xref='x',
            yref='y',
            text='Max: {}'.format(data_max[annots_idx]),
            showarrow=True,
            ax=0 if is_vertical else (-100/len(group_list))*4,
            ay=(-100/len(group_list))*2 if is_vertical else 0,
            arrowhead=7,
        ))

        annots_min.append(go.layout.Annotation(
            x=(np.log10(data_min[annots_idx]) if is_log else data_min[annots_idx]) if is_vertical else annots_idx,
            y=annots_idx if is_vertical else (np.log10(data_min[annots_idx]) if is_log else data_min[annots_idx]),
            xref='x',
            yref='y',
            text='Min: {}'.format(data_min[annots_idx]),
            showarrow=True,
            ax=0 if is_vertical else (100/len(group_list))*5,
            ay=(100/len(group_list))*2 if is_vertical else 0,
            arrowhead=7,
        ))

        annots_idx = annots_idx + 1

    if (not is_ndatashow):
        annots_ndata = []

    if (not is_statshow):
        annots_mean = []
        annots_median = []
        annots_p5 = []
        annots_p10 = []
        annots_p25 = []
        annots_p90 = []
        annots_p75 = []
        annots_p95 = []
        annots_max = []
        annots_min = []

    annots_ndata = annots_ndata + annots_mean + annots_median + annots_p5 + annots_p10 + annots_p25 + annots_p75 + annots_p90 + annots_p95 + annots_max + annots_min

    # Convert selected percentile values
    ip = 0
    if select_percentile == '5%':
        ip = 0
    elif select_percentile == '10%':
        ip = 1
    elif select_percentile == '90%':
        ip = 2
    else:
        ip = 3

    selected_marker_symbols[ip] = marker_symbol
    percentile_color_saved[ip] = picker_percentile_color

    # Change Orientation
    type_x = None
    type_y = None
    if (is_vertical):
        xaxis_title, yaxis_title = yaxis_title, xaxis_title
        type_x = 'log' if is_log else None
        if(is_meanshow):
            data_list.append(go.Scatter(x=data_mean, y=group_list, mode='markers', name='Mean', marker=dict(symbol=selected_marker_symbols[4], size=symbol_size)))
        # Generating Percentiles to Figure
        if (is_percentileshow):
            data_list.append(go.Scatter(y=group_list, x=percentile_5, mode='markers', name='5%', marker_color=percentile_color_saved[0], marker=dict(symbol=selected_marker_symbols[0], size=symbol_size)))
            data_list.append(go.Scatter(y=group_list, x=percentile_10, mode='markers', name='10%', marker_color=percentile_color_saved[1], marker=dict(symbol=selected_marker_symbols[1], size=symbol_size)))
            data_list.append(go.Scatter(y=group_list, x=percentile_90, mode='markers', name='90%', marker_color=percentile_color_saved[2], marker=dict(symbol=selected_marker_symbols[2], size=symbol_size)))
            data_list.append(go.Scatter(y=group_list, x=percentile_95, mode='markers', name='95%', marker_color=percentile_color_saved[3], marker=dict(symbol=selected_marker_symbols[3], size=symbol_size)))
    else:
        type_y = 'log' if is_log else None
        if(is_meanshow):
            data_list.append(go.Scatter(x=group_list, y=data_mean, mode='markers', name='Mean', marker=dict(symbol=selected_marker_symbols[4], size=symbol_size)))
        # Generating Percentiles to Figure
        if (is_percentileshow):
            data_list.append(go.Scatter(x=group_list, y=percentile_5, mode='markers', name='5%', marker_color=percentile_color_saved[0], marker=dict(symbol=selected_marker_symbols[0], size=symbol_size)))
            data_list.append(go.Scatter(x=group_list, y=percentile_10, mode='markers', name='10%', marker_color=percentile_color_saved[1], marker=dict(symbol=selected_marker_symbols[1], size=symbol_size)))
            data_list.append(go.Scatter(x=group_list, y=percentile_90, mode='markers', name='90%', marker_color=percentile_color_saved[2], marker=dict(symbol=selected_marker_symbols[2], size=symbol_size)))
            data_list.append(go.Scatter(x=group_list, y=percentile_95, mode='markers', name='95%', marker_color=percentile_color_saved[3], marker=dict(symbol=selected_marker_symbols[3], size=symbol_size)))

    treshold_shape = []

    if is_tresholdshow:
        treshold_shape.append(dict(line=dict(
                                # color="rgba(68, 68, 68, 0.5)",
                                color='rgba({}, {}, {}, {})'.format(
                                    treshold_color['rgb']['r'],
                                    treshold_color['rgb']['g'],
                                    treshold_color['rgb']['b'],
                                    treshold_color['rgb']['a'], ),
                                width=treshold_size, dash=treshold_style,
                                ),
            type='line',
            x0=-0.5 if not is_vertical else treshold_value,
            x1=len(group_list)-0.5 if not is_vertical else treshold_value,
            y0=treshold_value if not is_vertical else -0.5,
            y1=treshold_value if not is_vertical else len(group_list)-0.5,
        ))

    # Returning figure
    return{
        'data': data_list,
        'layout': go.Layout(
            xaxis=go.layout.XAxis(
                title=xaxis_title,
                showgrid=gridshow,
                zeroline=xzeroline,
                type=type_x,
                gridwidth=grid_width,
                gridcolor='lightgrey',
                dtick=dtick if is_vertical else None,
            ),
            yaxis=go.layout.YAxis(
                title=yaxis_title,
                showgrid=gridshow,
                zeroline=yzeroline,
                type=type_y,
                gridwidth=grid_width,
                gridcolor='lightgrey',
                dtick=None if is_vertical else dtick,
            ),
            title=main_title,
            showlegend=legendshow,
            height=graph_height,
            width=graph_width,
            annotations=annots_ndata,
            shapes=treshold_shape,
        )
    }
if __name__ == '__main__':
    app.run_server(debug=True)