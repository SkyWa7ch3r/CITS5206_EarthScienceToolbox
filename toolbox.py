import dash
import dash_html_components as html
import dash_core_components as dcc
import pandas as pd
import numpy as np
from datetime import datetime
import base64
import io
import dash_table

from dash.dependencies import Input, Output, State

#Create the app
app = dash.Dash(__name__)
'''
Turn callback exceptions off as we are generating callbacks that 
refer to things generated by other callbacks.
WARNING: THIS DOES DISABLE OTHER WARNINGS OR EXCEPTIONS FOR CALLBACKS
NOT BEING FOUND INSIDE THE PYTHON FILE
'''
app.config['suppress_callback_exceptions']=True

#Initialize the dataframe variable
df = pd.DataFrame()

#Begin the layout of the app layout
app.layout = html.Div(children = [
    #Create the header
    html.Div(
        className = "header",
        children = [
            html.Img(
                src="https://skyraidnextcloud.duckdns.org/index.php/s/Axc37NW9wjaKMyr/preview", 
                className="header-logo"
            ),
            html.H1("Earth Science Toolbox", className="header-title"),
        ]),
    #Add tabs to the page
    dcc.Tabs(
        id="tabs-styled-with-inline", 
        #Sets the default tab to open first
        value='upload',
        parent_className='custom-tabs', 
        className ='custom-tabs-container',
        children=[
            dcc.Tab(label='Data Upload', value='upload', className='custom-tab', selected_className='custom-tab--selected'),
            dcc.Tab(label='Scatter Plot', value='scatter', className='custom-tab', selected_className='custom-tab--selected'),
            dcc.Tab(label='Line Plot', value='line', className='custom-tab', selected_className='custom-tab--selected'),
            dcc.Tab(label='Box and Whisker Plot', value='box', className='custom-tab', selected_className='custom-tab--selected'),
            dcc.Tab(label='Bar Plot', value='bar', className='custom-tab', selected_className='custom-tab--selected'),
        ]),
    #The HTML Division to show the content
    html.Div(
        id='tabs-content-inline',
        className="custom-tabs-inline",
    )
])

@app.callback(Output('tabs-content-inline', 'children'),
              [Input('tabs-styled-with-inline', 'value')])
def render_content(tab):
    if tab == 'upload':
        return html.Div([
            html.H2('Upload Your Dataset'),
            dcc.Upload(
                id = 'data-upload',
                children=html.Div(['Drag and Drop or ', html.A('Select Files')]),
                className='data-upload',
            ),
            html.Div(id='output-data-upload'),
        ])
    elif tab == 'scatter':
        return html.Div([
            html.H3('Tab content 2')
        ])
    elif tab == 'line':
        return html.Div([
            html.H3('Tab content 3')
        ])
    elif tab == 'box':
        return html.Div([
            html.H3('Tab content 4')
        ])
    elif tab == 'bar':
        return html.Div([
            html.H3('Tab content 4')
        ])

'''
BEGIN CALLBACKS FOR EACH TAB SHOULD BE DONE IN THE 
ORDER AS DETERMINED BY THE TABS
'''

'''
Content for the Data Upload Page is below
Please look into the comments for what each one is for
Some of it is derived by https://dash.plot.ly/dash-core-components/upload
As it provides a good base to start from in order to upload files.
'''
def parse_contents(contents, filename, date):
    content_type, content_string = contents.split(',')

    decoded = base64.b64decode(content_string)
    try:
        if 'csv' in filename:
            # Assume that the user uploaded a CSV file
            df = pd.read_csv(io.StringIO(decoded.decode('utf-8')))
        elif 'xls' in filename:
            # Assume that the user uploaded an excel file
            df = pd.read_excel(io.BytesIO(decoded))
        elif 'xlsx' in filename:
            # Assume that the user uploaded an excel file
            df = pd.read_excel(io.BytesIO(decoded))
    #If an exception occured when uploading the file
    except Exception as e:
        #Print the exception in the terminal
        print(e)
        #Let User know there was a problem
        return html.Div([
            'There was an error processing this file.'
        ])

    return html.Div([
        html.H5(filename),
        html.H6(datetime.datetime.fromtimestamp(date)),

        dash_table.DataTable(
            data=df.to_dict('records'),
            columns=[{'name': i, 'id': i} for i in df.columns]
        ),
    ])


@app.callback(Output('output-data-upload', 'children'),
              [Input('upload-data', 'contents')],
              [State('upload-data', 'filename'),
               State('upload-data', 'last_modified')])
def update_output(list_of_contents, list_of_names, list_of_dates):
    if list_of_contents is not None:
        children = [
            parse_contents(c, n, d) for c, n, d in
            zip(list_of_contents, list_of_names, list_of_dates)]
        return children


if __name__ == '__main__':
    app.run_server(debug=True)